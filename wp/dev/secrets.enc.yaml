Step 3: GitOps with Argo CD
1. Install Argo CD
Install Argo CD on Kubernetes: Follow the official Argo CD installation guide to install Argo CD in your Kubernetes cluster.
Install Argo CD CLI: If needed, you can install the Argo CD CLI on your local machine to interact with Argo CD from the command line.
Run the command to install the CLI:
bash
Copy code
curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.8.0/argocd-linux-amd64
chmod +x /usr/local/bin/argocd
2. Connect GitHub Repository to Argo CD
Create an Argo CD Application:
In the Argo CD dashboard, create an application that points to the GitHub repository containing your Helm charts (for nginx-proxy, wordpress-app, and database).
You can also set up a GitHub repository in the Argo CD configuration using the CLI:
bash
Copy code
argocd repo add https://github.com/your-repository.git --username <your-username> --password <your-password>
Link the Helm chart directory:
Specify the directory within the repository where your Helm charts are stored. This should be the location of the charts for each component (nginx, WordPress, database).
Sync Application:
Once connected, Argo CD will begin monitoring the repository for changes. You can sync the application via the UI or CLI:
bash
Copy code
argocd app sync <your-app-name>
3. Automate Deployment
Helm Chart Definition:
In Argo CD, define the Helm chart for each component (nginx-proxy, WordPress, database). Set the appropriate namespace for each.
Configure Helm Overrides (if needed):
You can use the values.yaml file to override default Helm values specific to your environment.
Step 4: Create Dockerfiles for Custom Components
If you need custom Docker images for any component, hereâ€™s how to set them up:

1. Nginx Dockerfile (Customize Nginx config if necessary):
dockerfile
Copy code
FROM nginx:latest
COPY nginx.conf /etc/nginx/nginx.conf
2. WordPress Dockerfile (Add plugins or customization):
dockerfile
Copy code
FROM wordpress:latest
# Any additional plugins or configurations
3. Database Dockerfile (Customize if needed):
dockerfile
Copy code
FROM mariadb:10.6.4-focal
# Any setup or configurations needed (e.g., environment variables for user setup)
Step 5: Test and Verify the Deployment
1. Commit Changes to GitHub
Push the Helm charts and any Kubernetes manifests to your GitHub repository:
bash
Copy code
git add .
git commit -m "Initial commit for Helm charts and Kubernetes manifests"
git push origin main
2. Verify Deployment in Argo CD
After pushing your changes, Argo CD will detect them and begin deploying the components automatically.
Visit the Argo CD dashboard to verify that all components (nginx-proxy, WordPress, database) have been deployed successfully.
Check sync status in the Argo CD dashboard or use the CLI:
bash
Copy code
argocd app get <your-app-name>
3. Demonstrate Automatic Deployment
Change Configuration: Modify one of the deployments, for example, update the image tag for the WordPress container in the values.yaml file.
Commit Changes:
bash
Copy code
git commit -am "Updated WordPress image tag"
git push origin main
Argo CD will automatically detect the change and redeploy the updated resources.
Step 6: Documentation & Submission
1. Document the Steps
Write a Word Document:
Describe the entire process, including the installation of Argo CD, connection to the GitHub repository, Helm chart configuration, and Dockerfile creation.
Add screenshots demonstrating the Argo CD UI showing successful deployments, application status, and changes made in the repository.
Mention any challenges faced and how you solved them. For example, if you faced issues with syncing Helm charts or any network problems, document your troubleshooting steps.
Learning Outcomes: Describe the experience gained, such as familiarity with GitOps, Argo CD, and Kubernetes automation.
2. Security Considerations
Sensitive Data: Ensure any sensitive data (e.g., passwords or keys) is handled securely. Consider using Kubernetes secrets or tools like Sealed Secrets to encrypt sensitive data before pushing it to GitHub.
3. Cluster Setup Considerations
For better scalability, performance, and production-readiness, avoid using Minikube or Docker Desktop for this setup. Instead, use a managed Kubernetes service like AWS EKS, Google GKE, or Azure AKS for hosting the Kubernetes cluster.
Example Folder Structure for GitHub Repo:
bash
Copy code
/my-apps
    /nginx-proxy
        /charts
            /nginx-chart
        Dockerfile
    /wordpress-app
        /charts
            /wordpress-chart
        Dockerfile
    /database
        /charts
            /database-chart
        Dockerfile
    /k8s-manifests
        /deployment.yaml
        /service.yaml
        /ingress.yaml
This structure organizes your components and configurations neatly, making it easier for Argo CD to manage deployments.